{"version":3,"sources":["../src/datasource.js"],"names":["_","TimelionDatasource","instanceSettings","$q","backendSrv","templateSrv","esVersion","type","url","name","q","options","headers","datasourceRequest","query","buildQueryParameters","oThis","targets","length","when","data","request","method","then","response","sheet","list","map","ix","label","d","status","message","title","replace","annotation","annotationQuery","range","datasource","enable","iconColor","rangeRaw","result","interpolated","target","mapToTextValue","i","text","value","isObject","queryTpl","from","format","to","filter","hide","JSON","stringify"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class TimelionDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.instanceSettings = instanceSettings;\n    this.esVersion = this.instanceSettings.esVersion  || \"5.3.0\"\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n  }\n\n  request(options){\n    options.headers = {\n      \"kbn-version\": this.esVersion,\n      \"Content-Type\": \"application/json;charset=UTF-8\"\n    };\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  query(options) {\n    var query = this.buildQueryParameters(options);\n    var oThis = this;\n    if (query.targets.length <= 0) {\n      return this.q.when({data: []});\n    }\n    return this.request({\n        url: this.url + '/run',\n        data: options.query,\n        method: 'POST'\n      }).then(response => ({\"data\": response.data.sheet[\"0\"].list\n            .map((list,ix) => ({\n              \"target\": list.label,\n              \"datapoints\": _.map(list.data, d => [d[1],d[0]])\n            }))}));\n  }\n\n  testDatasource() {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/run',\n      method: 'GET'\n    }).then(response => {\n      if (response.status === 400) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    });\n  }\n\n  annotationQuery(options) {\n    var query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\n    var annotationQuery = {\n      range: options.range,\n      annotation: {\n        name: options.annotation.name,\n        datasource: options.annotation.datasource,\n        enable: options.annotation.enable,\n        iconColor: options.annotation.iconColor,\n        query: query\n      },\n      rangeRaw: options.rangeRaw\n    };\n\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/annotations',\n      method: 'POST',\n      data: annotationQuery\n    }).then(result => {\n      return result.data;\n    });\n  }\n\n  metricFindQuery(query) {\n    var interpolated = {\n      target: this.templateSrv.replace(query, null, 'regex')\n    };\n\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/search',\n      data: interpolated,\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' }\n    }).then(this.mapToTextValue);\n  }\n\n  mapToTextValue(result) {\n    return _.map(result.data, (d, i) => {\n      if (d && d.text && d.value) {\n        return { text: d.text, value: d.value };\n      } else if (_.isObject(d)) {\n        return { text: d, value: i};\n      }\n      return { text: d, value: d };\n    });\n  }\n\n  buildQueryParameters(options) {\n    const queryTpl = {\"sheet\":null,\n                      \"time\":{\n                        \"from\": options.range.from.format(\"YYYY-MM-DDTHH:mm:ss ZZ\"),\n                        \"interval\":\"auto\",\n                        \"mode\":\"absolute\",\n                        \"timezone\":\"GMT\",\n                        \"to\": options.range.to.format(\"YYYY-MM-DDTHH:mm:ss ZZ\")\n                      }\n                    };\n    //remove placeholder targets\n    options.targets = _.filter(options.targets, target => {\n      return target.target !== 'select metric' && !target.hide;\n    });\n\n    queryTpl.sheet = _.map(options.targets, \n                      target => this.templateSrv\n                            .replace(target.target)\n                            .replace(/\\r\\n|\\r|\\n/mg, \"\"));\n    options.query = JSON.stringify(queryTpl);\n    return options;\n  }\n}\n"]}